fun filter(cadena: String, fn: (Char) -> Boolean): String {
    val resultado = StringBuilder()
    for (c in cadena) {
        if (fn(c)) {
            resultado.append(c)
        }
    }
    return resultado.toString()
}

fun main(args: Array<String>) {
    val cadena = "Â¿aprueba1 o no aprueba2?"

    println("String original:")
    println(cadena)

    val resultado1 = filter(cadena) {
        it == 'a' || it == 'e' || it == 'i' || it == 'o' || it == 'u' ||
                it == 'A' || it == 'E' || it == 'I' || it == 'O' || it == 'U'
    }
    println("\nSolo las vocales:")
    println(resultado1)

    val resultado2 = filter(cadena) {
        it in 'a'..'z'
    }
    println("\nSolo caracteres en minÃºscula:")
    println(resultado2)

    val resultado3 = filter(cadena) {
        it !in 'a'..'z' && it !in 'A'..'Z'
    }
    println("\nSolo caracteres no alfabÃ©ticos:")
    println(resultado3)
}
//FunciÃ³n imprimirSi2() con condiciÃ³n de impresiÃ³n usando expresiones lambda.
//ğŸ”¹ Se crea un arreglo de 10 enteros aleatorios entre 0 y 99.
//ğŸ”¹ Se imprimen:
//â€¢	MÃºltiplos de 2
//â€¢	MÃºltiplos de 3 o de 5
//â€¢	NÃºmeros mayores o iguales a 50
//â€¢	NÃºmeros dentro de ciertos rangos con when
//â€¢	Todos los elementos
//ğŸ”¹ Es un ejercicio completo de uso de condiciones lÃ³gicas para filtrado dinÃ¡mico.